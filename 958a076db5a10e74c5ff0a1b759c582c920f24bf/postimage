[% USE raw %]
[% USE Asset %]
[% USE Koha %]
[% USE KohaDates %]
[% USE AuthorisedValues %]
[% USE Price %]
[% USE UBOnlinePayment %]
[% SET ENABLE_OPAC_PAYMENTS = Koha.Preference('EnablePayPalOpacPayments') || plugins %]
[% SET DISPLAY_PAYMENT_BLOCK = 0 %]
[% INCLUDE 'doc-head-open.inc' %]
<title>[% IF ( LibraryNameTitle ) %][% LibraryNameTitle | html %][% ELSE %]Koha online[% END %] catalog &rsaquo; Your charges</title>
[% INCLUDE 'doc-head-close.inc' %]
[% BLOCK cssinclude %]
    [% Asset.css("css/datatables.css") | $raw %]
[% END %]


</head>

[% INCLUDE 'bodytag.inc' bodyid='opac-account' bodyclass='scrollto' %]
[% INCLUDE 'masthead.inc' %]
<div class="main">
    <ul class="breadcrumb">
        <li><a href="/cgi-bin/koha/opac-main.pl">Home</a> <span class="divider">&rsaquo;</span></li>
        <li>[% IF logged_in_user %]<a href="/cgi-bin/koha/opac-user.pl">[% INCLUDE 'patron-title.inc' patron = logged_in_user %]</a>[% END %] <span class="divider">&rsaquo;</span></li>
        <li><a href="#">Your charges</a></li>
    </ul>

    <div class="container-fluid">
        <div class="row-fluid">
            <div class="span2">
                <div id="navigation">
                    [% INCLUDE 'navigation.inc' IsPatronPage=1 %]
                </div>
            </div>
            <div class="span10">
                <div id="useraccount" class="maincontent">

                    [% IF message %]
                        <div class="alert alert-info">
                            [% IF message == 'valid_payment' %]
                                <p>Your payment of $[% message_value | html %] has been processed successfully!</p>
                            [% ELSIF message == 'duplicate_payment' %]
                                <p>A payment with the transaction id '[% message_value | html %]' has already been posted to an account.</p>
                                <p>Please contact a librarian for details.</p>
                            [% ELSIF message == 'invalid_payment' %]
                                <p>The transaction id '[% message_value | html %]' for this payment is invalid.</p>
                                <p>Please contact a librarian for details.</p>
                            [% END %]
                        </div>
                    [% END %]

                    [% IF payment_error %]
                        <div id="error" class="dialog alert">
                            <p><strong>Error:</strong> there was a problem processing your payment</p>

                            [% IF payment_error == "PAYPAL_UNABLE_TO_CONNECT" %]
                                <p>Unable to connect to PayPal.</p>
                                <p>Please contact a librarian to verify your payment.</p>
                            [% ELSIF payment_error == "PAYPAL_ERROR_PROCESSING" %]
                                <p>Unable to verify payment.</p>
                                <p>Please contact a librarian to verify your payment.</p>
                            [% END %]
                        </div>
                    [% ELSIF payment %]
                        <div class="alert alert-info">
                            <p><strong>Payment applied:</strong> your payment of [% payment | html %] has been applied to your account</p>
                        </div>
                    [% END %]

                    [% PROCESS 'account-table.inc' ACCOUNT_LINES = ACCOUNT_LINES, ENABLE_OPAC_PAYMENTS = ENABLE_OPAC_PAYMENTS, plugins = plugins %]

                    [% IF ( UBOnlinePayment.Active() ) %]
                        [% IF ( UBOnlinePayment.isExcludedFromOnlinePayment) %]
                            <div id="no-online-payment" style="max-width:500px">
                                <p id="no-online-payment-text">
                                    Your payments will be invoiced lorum ipsumlorum ipsumlorum ipsumlorum ipsumlorum ipsumlorum ipsumlorum ipsumlorum ipsumlorum ipsumlorum ipsumlorum ipsumlorum ipsumlorum ipsumlorum ipsumlorum ipsumlorum ipsum
                                </p>
                                <p id="no-online-payment-link"><a href="[% UBOnlinePayment.ExternalInfoURL() %]">More info about loans and fines</a></p>
                            </div>
                        [% ELSE %]
                            [% IF  ACCOUNT_LINES.count > 0  %]
                            <div id="online-payment">
                                <strong><span id="online-payment-amount">Amount to pay:</span> <span class="amount-payable"></span> SEK</strong>
                                <p><span id="online-payment-debt-after-payment">(Debt after payment has been made:</span> <span class="amount-debt-left-after-payment"></span> SEK)</p>
                                <form method="post" action="[% UBOnlinePayment.URL() | html %]?language=[%current_lang%]">
                                    <input type="submit" class="btn btn-default" value="Pay selected fines"></input>
                                    <textarea  id="ub-debug-json" type="hidden" name="payment_data" style="width:80%; min-height:400px; display:none;"></textarea>
                                </form>
                            </div>
                            [% END %]
                        [% END %]
                    [% END %]

                </div> <!-- / #useraccount -->
            </div> <!-- / .span10 -->
        </div> <!-- / .row-fluid -->
    </div> <!-- / .container-fluid -->
</div> <!-- / .main -->

[% INCLUDE 'opac-bottom.inc' %]
[% BLOCK jsinclude %]
[% INCLUDE 'datatables.inc' %]
<script>
$( document ).ready(function() {

    var MSG_MIN_THRESHOLD = _("Minimum amount needed by this service is %s");
    var txtActivefilter = _("Filter paid transactions");
    var txtInactivefilter = _("Show all transactions");

    let paydata = {};
    let returnURL = window.location.href + "?language=" + "[% current_lang %]";
    let callbackURL = "[% staffClientBaseURL %]" + "/cgi-bin/koha/svc/onlinepayment";  // window.location.href;

    function getAmountPayable(payments) {
        var amounts = payments.map(o => {return o['amount']});
        if (amounts.length) {
            return amounts.reduce((total, num) => total + num);
        }
        return 0;
    }

    function getDebtTotal() {
        let total = 0;
        $(".account-line-checkbox").each(function(index, item) {
            total += parseFloat($(item).attr("data-amount").replace(/\s/g, ""));
        });
        return total;
    }

    function getPaymentName(type) {
        let payment_type = {};
        if ("[% current_lang %]" === "en-US") {
            payment_type = { // TBD
                "A"             : "A MAPPED EN",
                "LOST"          : "LOST MAPPED EN",
                "MANUAL"        : "MANUAL MAPPED EN",
                "OVERDUE"       : "OVEERDUE MAPPED EN",
                "PROCESSING"    : "PROCESSING_MAPPED EN"
            }
        }
        else {
            payment_type = { // TBD
                "A"             : "A MAPPED SV",
                "LOST"          : "LOST MAPPED SV",
                "MANUAL"        : "MANUAL MAPPED SV",
                "OVERDUE"       : "OVEERDUE MAPPED SV",
                "PROCESSING"    : "PROCESSING_MAPPED SV"
            }
        }
        if (!payment_type[type]) {
            if ("[% current_lang %]" === "en-US") {
                return 'Other Payment';
            }
            return 'Annan avgift';
        }
        return payment_type[type]
    }

    function getSimpleDebitType(type) {
        if (type === "OVERDUE") {
            return "fine";
        }
        return "media";
    }

    function getLibraryGroup(id, payment_type) {
        let branches = {
            "G": [44, 60, 62],
            "Gm": [40, 43, 49, 66],
            "Gpek": [42, 47, 48, 50]

        }
        let librarygroup = null;
        var found = Object.entries(branches).some((item) => {
            return item[1].some(function(el) {
                if (el === parseInt(id)) {
                    librarygroup = item[0];
                    return item[0];
                }
            });
        })
        if (found)  {
            return librarygroup;
        }
        return "Gpek";
    }

    function getFullTitle() {
        var title = $(this).attr('data-title') ? $(this).attr('data-title') : '';
        var subtitle = $(this).attr('data-subtitle') ? $(this).attr('data-subtitle') : '';
        var fullTitle = title + subtitle;
        if (fullTitle === '' || fullTitle === ' ' || fullTitle === undefined) {
            if ("[% current_lang %]" === "en-US") {
                return 'Title missing'
            }
            return 'Ok√§nd titel';
        }
        return fullTitle;
    }

    function getBarcode() {
        var barcode = $(this).attr('data-barcode') ? $(this).attr('data-barcode') : '';
        if (barcode === '') {
             if ("[% current_lang %]" === "en-US") {
                 return "barcode missing";
             }
             return "streckkod saknas";
        }
    }

    $("#check-all-payable").bind("change", function(val) {
        if ($("#check-all-payable").prop("checked")) {
            $(".account-line-checkbox:not(:disabled)").prop("checked", true).trigger("change");
            return;
        }
        $(".account-line-checkbox:not(:disabled)").prop("checked", false).trigger("change");
    });

    $(".account-line-checkbox").bind("change", function() {
        paydata.uid = "[% guid %]";
        paydata.language = "[% current_lang %]"; // MAYBE NOT NEEDED IF RETURN_URL CONTAINS LANGUAGE
        paydata.return_url = returnURL;
        paydata.callback_url = callbackURL;
        let payments = [];
        $(".account-line-checkbox:checked").each(function() {
            let paymentRow = {
                account_id          :       parseInt($(this).attr('data-accountLineID')),
                amount              :       parseFloat($(this).attr('data-amount').replace(/\s/g, "")),
                library_group       :       getLibraryGroup($(this).attr('data-library-code'),  $(this).attr('data-item-itype')),  // ITEM.ITYPES
                debit_type          :       getSimpleDebitType($(this).attr('data-payment-type')),
                debit_title         :       getPaymentName($(this).attr('data-payment-type')),
                text                :       getBarcode(),
                title               :       getFullTitle(),
            }
            payments.push(paymentRow);
        });
        paydata.payments = payments;
        let amountPayable = getAmountPayable(payments);
        $(".amount-payable").text(amountPayable);
        $(".amount-debt-left-after-payment").text(getDebtTotal() - amountPayable);
        $("#ub-debug-json").val((JSON.stringify(paydata, undefined, 4)));
    });

    // disable payment-rows
    $(".account-line-checkbox").each(function(index, item) {
        [% UNLESS ( UBOnlinePayment.isExcludedFromOnlinePayment) %]
            if (parseFloat(item.dataset.amount) <= 0) {
                return;
            }
            if ((item.dataset.paymentType === "LOST")) {
                return;
            }
            if ((item.dataset.paymentType === "A")) {
                return;
            }
            if ((item.dataset.paymentType === "OVERDUE") && (item.dataset.paymentStatus === "RETURNED"))  {
                return;
            }
            if ((item.dataset.paymentType === "OVERDUE") && (item.dataset.paymentStatus === "LOST"))  {
                return;
            }
            if ((item.dataset.paymentType === "OVERDUE") && (item.dataset.paymentStatus === "RENEWED"))  {
                return;
            }
        [% END %]
        item.disabled = true;
    });
    [% UNLESS ( UBOnlinePayment.isExcludedFromOnlinePayment) %]
        $("#check-all-payable").prop("checked", true);
        $(".account-line-checkbox:not(:disabled)").prop("checked", true).trigger("change");
    [% ELSE %]
        $("#check-all-payable").prop("disabled", true);
    [% END %]

    var fines_table = $("#finestable").dataTable($.extend(true, {}, dataTablesDefaults, {
        [% IF UBOnlinePayment.Active() %]
            "order": [[ 1, "desc" ]],
        [% ELSE %]
            "order": [[ 0, "desc" ]],
        [% END %]
        "columnDefs": [
             { "type": "title-string", "targets" : [ "title-string" ] }
         ],
        "columns": [
            [% IF UBOnlinePayment.Active() %]{ "orderable": false },[% END %]
            null,
            null,
            null,
            null
        ],
         "dom": '<"#filter_p">',
    }));
});
</script>

[% END %]
