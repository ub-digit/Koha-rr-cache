#!/usr/bin/perl

#A script that lets the user populate a basket from an iso2709 file
#the script first displays a list of import batches, then when a batch is selected displays all the biblios in it.
#The user can then pick which biblios they want to order

# Copyright 2008 - 2011 BibLibre SARL
#
# This file is part of Koha.
#
# Koha is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Koha is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Koha; if not, see <http://www.gnu.org/licenses>.

use Modern::Perl;
use CGI qw ( -utf8 );
use List::MoreUtils;
use Encode;
use Scalar::Util qw( looks_like_number );

use C4::Context;
use C4::Auth        qw( get_template_and_user );
use C4::Output      qw( output_html_with_http_headers );
use C4::ImportBatch qw( SetImportBatchStatus );
use C4::Matcher;
use C4::Search qw( FindDuplicate );
use C4::Biblio qw(
    AddBiblio
    GetMarcFromKohaField
    GetMarcPrice
    GetMarcQuantity
    TransformHtmlToXml
);
use C4::Items   qw( PrepareItemrecordDisplay AddItemFromMarc );
use C4::Budgets qw( GetBudget GetBudgets GetBudgetHierarchy CanUserUseBudget );
use C4::Suggestions;    # GetSuggestion
use C4::Members;

use Koha::Number::Price;
use Koha::Libraries;
use Koha::Acquisition::Baskets;
use Koha::Acquisition::Currencies;
use Koha::Acquisition::Orders;
use Koha::Acquisition::Booksellers;
use Koha::ImportBatches;
use Koha::Import::Records;
use Koha::Acquisition::Currencies;
use Koha::Patrons;
use Koha::MarcOrder;

my $input = CGI->new;
my ( $template, $loggedinuser, $cookie, $userflags ) = get_template_and_user(
    {
        template_name => "acqui/addorderiso2709.tt",
        query         => $input,
        type          => "intranet",
        flagsrequired => { acquisition => 'order_manage' },
    }
);

my $cgiparams    = $input->Vars;
my $op           = $cgiparams->{'op'} || '';
my $booksellerid = $input->param('booksellerid');
my $allmatch     = $input->param('allmatch');
my $bookseller   = Koha::Acquisition::Booksellers->find($booksellerid);

$template->param(
    scriptname     => "/cgi-bin/koha/acqui/addorderiso2709.pl",
    booksellerid   => $booksellerid,
    booksellername => $bookseller->name,
);

if ( $cgiparams->{'import_batch_id'} && $op eq "" ) {
    $op = "batch_details";
}

#Needed parameters:
if ( !$cgiparams->{'basketno'} ) {
    die "Basketnumber required to order from iso2709 file import";
}
my $basket = Koha::Acquisition::Baskets->find( $cgiparams->{basketno} );

#
# 1st step = choose the file to import into acquisition
#
if ( $op eq "" ) {
    $template->param( "basketno" => $cgiparams->{'basketno'} );

    #display batches
    my $batches_list = Koha::MarcOrder->import_batches_list();
    $template->param(
        batch_list => $batches_list->{list},
        num_results => $batches_list->{num_results}
    );
    #
    # 2nd step = display the content of the chosen file
    #
} elsif ( $op eq "batch_details" ) {

    #display lines inside the selected batch

    $template->param(
        "batch_details" => 1,
        "basketno"      => $cgiparams->{'basketno'},

        # get currencies (for change rates calcs if needed)
        currencies => Koha::Acquisition::Currencies->search,
        bookseller => $bookseller,
        "allmatch" => $allmatch,
    );
    my $biblios_list = Koha::MarcOrder->import_biblios_list( $cgiparams->{'import_batch_id'} );
    my $overlay_action = $biblios_list->{overlay_action};
    my $nomatch_action = $biblios_list->{nomatch_action};
    my $item_action    = $biblios_list->{item_action};
    my $batch          = $biblios_list->{batch};

    $template->param(
        import_biblio_list                 => $biblios_list->{import_biblio_list},
        num_results                        => $biblios_list->{num_results},
        import_batch_id                    => $biblios_list->{import_batch_id},
        "overlay_action_${overlay_action}" => 1,
        overlay_action                     => $overlay_action,
        "nomatch_action_${nomatch_action}" => 1,
        nomatch_action                     => $nomatch_action,
        "item_action_${item_action}"       => 1,
        item_action                        => $biblios_list->{item_action},
        item_error                         => $biblios_list->{item_error},
        libraries                          => Koha::Libraries->search,
        locationloop                       => $biblios_list->{locationloop},
        itemtypes                          => Koha::ItemTypes->search,
        ccodeloop                          => $biblios_list->{ccodeloop},
        notforloanloop                     => $biblios_list->{notforloanloop},
        can_commit                         => $biblios_list->{can_commit},
        can_revert                         => $biblios_list->{can_revert},
        current_matcher_id                 => $biblios_list->{current_matcher_id},
        current_matcher_code               => $biblios_list->{current_matcher_code},
        current_matcher_description        => $biblios_list->{current_matcher_description},
        available_matchers                 => $biblios_list->{available_matchers},
        batch_info                         => 1,
        file_name                          => $batch->{'file_name'},
        comments                           => $batch->{'comments'},
        import_status                      => $batch->{'import_status'},
        upload_timestamp                   => $batch->{'upload_timestamp'},
        num_records                        => $batch->{'num_records'},
        num_items                          => $batch->{'num_items'}
    );

    if ( $basket->effective_create_items eq 'ordering' && !$basket->is_standing ) {

        # prepare empty item form
        my $cell = PrepareItemrecordDisplay( '', '', undef, 'ACQ' );

        #     warn "==> ".Data::Dumper::Dumper($cell);
        unless ($cell) {
            $cell = PrepareItemrecordDisplay( '', '', undef, '' );
            $template->param( 'NoACQframework' => 1 );
        }
        my @itemloop;
        push @itemloop, $cell;

        $template->param( items => \@itemloop );
    }
#
# 3rd step = import the records
#
} elsif ( $op eq 'cud-import_records' ) {
#import selected lines
    $template->param('basketno' => $cgiparams->{'basketno'});
# Budget_id is mandatory for adding an order, we just add a default, the user needs to modify this aftewards
    my $budgets = GetBudgets();
    if ( scalar @$budgets == 0 ) {
        die "No budgets defined, can't continue";
    }
    my $budget_id = @$budgets[0]->{'budget_id'};

    #get all records from a batch, and check their import status to see if they are checked.
    #(default values: quantity 1, uncertainprice yes, first budget)

    # retrieve the file you want to import
    my $import_batch_id = $cgiparams->{'import_batch_id'};
    my $import_batch    = Koha::ImportBatches->find($import_batch_id);
    my $overlay_action  = $import_batch->overlay_action;
    my $import_records  = Koha::Import::Records->search(
        {
            import_batch_id => $import_batch_id,
        }
    );
    my $duplinbatch;
    my $imported                  = 0;
    my @import_record_id_selected = $input->multi_param("import_record_id");
    my $matcher_id                = $input->param('matcher_id');
    my $active_currency           = Koha::Acquisition::Currencies->get_active;

    while ( my $import_record = $import_records->next ) {
        my $marcrecord        = $import_record->get_marc_record || die "couldn't translate marc information";
        my @homebranches      = $input->multi_param( 'homebranch_' . $import_record->import_record_id );
        my @holdingbranches   = $input->multi_param( 'holdingbranch_' . $import_record->import_record_id );
        my @itypes            = $input->multi_param( 'itype_' . $import_record->import_record_id );
        my @nonpublic_notes   = $input->multi_param( 'nonpublic_note_' . $import_record->import_record_id );
        my @public_notes      = $input->multi_param( 'public_note_' . $import_record->import_record_id );
        my @locs              = $input->multi_param( 'loc_' . $import_record->import_record_id );
        my @ccodes            = $input->multi_param( 'ccode_' . $import_record->import_record_id );
        my @notforloans       = $input->multi_param( 'notforloan_' . $import_record->import_record_id );
        my @uris              = $input->multi_param( 'uri_' . $import_record->import_record_id );
        my @copynos           = $input->multi_param( 'copyno_' . $import_record->import_record_id );
        my @budget_codes      = $input->multi_param( 'budget_code_' . $import_record->import_record_id );
        my @itemprices        = $input->multi_param( 'itemprice_' . $import_record->import_record_id );
        my @replacementprices = $input->multi_param( 'itemreplacementprice_' . $import_record->import_record_id );
        my @itemcallnumbers   = $input->multi_param( 'itemcallnumber_' . $import_record->import_record_id );
        my @coded_location_qualifiers =
            $input->multi_param( 'coded_location_qualifier_' . $import_record->import_record_id );
        my @barcodes           = $input->multi_param( 'barcode_' . $import_record->import_record_id );
        my @enumchrons         = $input->multi_param( 'enumchron_' . $import_record->import_record_id );
        my @tags               = $input->multi_param('tag');
        my @subfields          = $input->multi_param('subfield');
        my @field_values       = $input->multi_param('field_value');
        my @serials            = $input->multi_param('serial');
        my $order_internalnote = $cgiparams->{'all_order_internalnote'};
        my $order_vendornote   = $cgiparams->{'all_order_vendornote'};
        my $all_currency       = $cgiparams->{'all_currency'};

        my $client_item_fields = {
            quantity          => scalar(@homebranches),
            homebranches      => \@homebranches,
            holdingbranches   => \@holdingbranches,
            itypes            => \@itypes,
            nonpublic_notes   => \@nonpublic_notes,
            public_notes      => \@public_notes,
            locs              => \@locs,
            ccodes            => \@ccodes,
            notforloans       => \@notforloans,
            uris              => \@uris,
            copynos           => \@copynos,
            budget_codes      => \@budget_codes,
            itemprices        => \@itemprices,
            replacementprices => \@replacementprices,
            itemcallnumbers   => \@itemcallnumbers,
            coded_location_qualifiers => \@coded_location_qualifiers,
            barcodes           => \@barcodes,
            enumchrons         => \@enumchrons,
            tags               => \@tags,
            subfields          => \@subfields,
            field_values       => \@field_values,
            serials            => \@serials,
            c_quantity =>
                $input->param( 'quantity_' . $import_record->import_record_id )
                || GetMarcQuantity( $marcrecord, C4::Context->preference('marcflavour') )
                || 1,
            c_budget_id =>
                $input->param( 'budget_id_' . $import_record->import_record_id )
                || $input->param('all_budget_id')
                || $budget_id,
            c_discount => $input->param( 'discount_' . $import_record->import_record_id ),
            c_sort1 => $input->param( 'sort1_' . $import_record->import_record_id ) || $input->param('all_sort1') || '',
            c_sort2 => $input->param( 'sort2_' . $import_record->import_record_id ) || $input->param('all_sort2') || '',
            c_replacement_price => $input->param( 'replacementprice_' . $import_record->import_record_id ),
            c_price             => $input->param( 'price_' . $import_record->import_record_id )
                || GetMarcPrice( $marcrecord, C4::Context->preference('marcflavour') ),
            order_internalnote => $order_internalnote,
            order_vendornote   => $order_vendornote,
            all_currency       => $all_currency,
        };

        my $args = {
            import_batch_id           => $import_batch_id,
            import_record             => $import_record,
            matcher_id                => $matcher_id,
            overlay_action            => $overlay_action,
            agent                     => 'client',
            import_record_id_selected => \@import_record_id_selected,
            client_item_fields        => $client_item_fields,
            basket_id                 => $cgiparams->{'basketno'},
            vendor                    => $bookseller,
            budget_id                 => $budget_id,
        };
        my $result = Koha::MarcOrder->import_record_and_create_order_lines($args);

        $duplinbatch = $result->{duplicates_in_batch} if $result->{duplicates_in_batch};
        next if $result->{skip};    # If a duplicate is found, or the import record wasn't selected it will be skipped

<<<<<<<
=======
        $import_record->import_biblio->matched_biblionumber($biblionumber)->store;

        # Add items from MarcItemFieldsToOrder
        my @homebranches = $input->multi_param('homebranch_' . $import_record->import_record_id);
        my $count = scalar @homebranches;
        my @holdingbranches = $input->multi_param('holdingbranch_' . $import_record->import_record_id);
        my @itypes = $input->multi_param('itype_' . $import_record->import_record_id);
        my @nonpublic_notes = $input->multi_param('nonpublic_note_' . $import_record->import_record_id);
        my @public_notes = $input->multi_param('public_note_' . $import_record->import_record_id);
        my @locs = $input->multi_param('loc_' . $import_record->import_record_id);
        my @ccodes = $input->multi_param('ccode_' . $import_record->import_record_id);
        my @notforloans = $input->multi_param('notforloan_' . $import_record->import_record_id);
        my @uris = $input->multi_param('uri_' . $import_record->import_record_id);
        my @copynos = $input->multi_param('copyno_' . $import_record->import_record_id);
        my @budget_ids =
            $input->multi_param( 'budget_code_' . $import_record->import_record_id ); # bad field name used in template!
        my @itemprices = $input->multi_param('itemprice_' . $import_record->import_record_id);
        my @replacementprices = $input->multi_param('replacementprice_' . $import_record->import_record_id);
        my @itemcallnumbers = $input->multi_param('itemcallnumber_' . $import_record->import_record_id);
        my $itemcreation = 0;

        my @itemnumbers;
        for (my $i = 0; $i < $count; $i++) {
            $itemcreation = 1;
            my $item = Koha::Item->new(
                {
                    biblionumber        => $biblionumber,
                    homebranch          => $homebranches[$i],
                    holdingbranch       => $holdingbranches[$i],
                    itemnotes_nonpublic => $nonpublic_notes[$i],
                    itemnotes           => $public_notes[$i],
                    location            => $locs[$i],
                    ccode               => $ccodes[$i],
                    itype               => $itypes[$i],
                    notforloan          => $notforloans[$i],
                    uri                 => $uris[$i],
                    copynumber          => $copynos[$i],
                    price               => $itemprices[$i],
                    replacementprice    => $replacementprices[$i],
                    itemcallnumber      => $itemcallnumbers[$i],
                }
            )->store;
            push( @itemnumbers, $item->itemnumber );
        }
        if ($itemcreation == 1) {
            # Group orderlines from MarcItemFieldsToOrder
            my $budget_hash;
            for (my $i = 0; $i < $count; $i++) {
                $budget_ids[$i] = $budget_id if !$budget_ids[$i];   # Use default budget if no budget selected in the UI
                $budget_hash->{ $budget_ids[$i] }->{quantity} += 1;
                $budget_hash->{ $budget_ids[$i] }->{price} = $itemprices[$i];
                $budget_hash->{ $budget_ids[$i] }->{replacementprice} =
                  $replacementprices[$i];
                $budget_hash->{ $budget_ids[$i] }->{itemnumbers} //= [];
                push @{ $budget_hash->{ $budget_ids[$i] }->{itemnumbers} },
                  $itemnumbers[$i];
            }

            # Create orderlines from MarcItemFieldsToOrder
            while(my ($budget_id, $infos) = each %$budget_hash) {
                if ($budget_id) {
                    my %orderinfo = (
                        biblionumber       => $biblionumber,
                        basketno           => $cgiparams->{'basketno'},
                        quantity           => $infos->{quantity},
                        budget_id          => $budget_id,
                        currency           => $cgiparams->{'all_currency'},
                    );

                    my $price = $infos->{price};
                    if ($price){
                        # in France, the cents separator is the , but sometimes, ppl use a .
                        # in this case, the price will be x100 when unformatted ! Replace the . by a , to get a proper price calculation
                        $price =~ s/\./,/ if C4::Context->preference("CurrencyFormat") eq "FR";
                        $price = Koha::Number::Price->new($price)->unformat;
                        # RECALCULATE PRICE BASED ON CURRENCY
                        my $currency_code = $bookseller->listprice;
                        my $currency = Koha::Acquisition::Currencies->find($currency_code);
                        my $currency_rate = $currency->rate;
                        $price = $price * $currency_rate;
                        $orderinfo{tax_rate_on_ordering} = $bookseller->tax_rate;
                        $orderinfo{tax_rate_on_receiving} = $bookseller->tax_rate;
                        my $order_discount = $c_discount ? $c_discount : $bookseller->discount;
                        $orderinfo{discount} = $order_discount;
                        $orderinfo{rrp} = $price;
                        $orderinfo{ecost} = $order_discount ? $price * ( 1 - $order_discount / 100 ) : $price;
                        $orderinfo{listprice} = $orderinfo{rrp} / $active_currency->rate;
                        $orderinfo{unitprice} = $orderinfo{ecost};
                        $orderinfo{sort1} = $c_sort1;
                        $orderinfo{sort2} = $c_sort2;
                    } else {
                        $orderinfo{listprice} = 0;
                    }
                    $orderinfo{replacementprice} = $infos->{replacementprice} || 0;

                    # remove uncertainprice flag if we have found a price in the MARC record
                    $orderinfo{uncertainprice} = 0 if $orderinfo{listprice};

                    my $order = Koha::Acquisition::Order->new( \%orderinfo );
                    $order->populate_with_prices_for_ordering();
                    $order->populate_with_prices_for_receiving();
                    $order->store;
                    $order->add_item( $_ ) for @{ $budget_hash->{$budget_id}->{itemnumbers} };
                }
            }
        } else {
            # 3rd add order
            my $patron = Koha::Patrons->find( $loggedinuser );
            # get quantity in the MARC record (1 if none)
            my $quantity = GetMarcQuantity($marcrecord, C4::Context->preference('marcflavour')) || 1;
            my %orderinfo = (
                biblionumber       => $biblionumber,
                basketno           => $cgiparams->{'basketno'},
                quantity           => $c_quantity,
                branchcode         => $patron->branchcode,
                budget_id          => $c_budget_id,
                uncertainprice     => 1,
                sort1              => $c_sort1,
                sort2              => $c_sort2,
                order_internalnote => $cgiparams->{'all_order_internalnote'},
                order_vendornote   => $cgiparams->{'all_order_vendornote'},
                currency           => $cgiparams->{'all_currency'},
                replacementprice   => $c_replacement_price,
            );
            # get the price if there is one.
            if ($c_price){
                # in France, the cents separator is the , but sometimes, ppl use a .
                # in this case, the price will be x100 when unformatted ! Replace the . by a , to get a proper price calculation
                $c_price =~ s/\./,/ if C4::Context->preference("CurrencyFormat") eq "FR";
                $c_price = Koha::Number::Price->new($c_price)->unformat;
                # RECALCULATE PRICE BASED ON CURRENCY
                my $currency_code = $bookseller->listprice;
                my $currency = Koha::Acquisition::Currencies->find($currency_code);
                my $currency_rate = $currency->rate;
                $c_price = $c_price * $currency_rate;
                $orderinfo{tax_rate_on_ordering} = $bookseller->tax_rate;
                $orderinfo{tax_rate_on_receiving} = $bookseller->tax_rate;
                my $order_discount = $c_discount ? $c_discount : $bookseller->discount;
                $orderinfo{discount} = $order_discount;
                $orderinfo{rrp}   = $c_price;
                $orderinfo{ecost} = $order_discount ? $c_price * ( 1 - $order_discount / 100 ) : $c_price;
                $orderinfo{listprice} = $orderinfo{rrp} / $active_currency->rate;
                $orderinfo{unitprice} = $orderinfo{ecost};
            } else {
                $orderinfo{listprice} = 0;
            }

            # remove uncertainprice flag if we have found a price in the MARC record
            $orderinfo{uncertainprice} = 0 if $orderinfo{listprice};

            my $order = Koha::Acquisition::Order->new( \%orderinfo );
            $order->populate_with_prices_for_ordering();
            $order->populate_with_prices_for_receiving();
            $order->store;

            # 4th, add items if applicable
            # parse the item sent by the form, and create an item just for the import_record_id we are dealing with
            # this is not optimised, but it's working !
            if ( $basket->effective_create_items eq 'ordering' && !$basket->is_standing ) {
                my @tags         = $input->multi_param('tag');
                my @subfields    = $input->multi_param('subfield');
                my @field_values = $input->multi_param('field_value');
                my @serials      = $input->multi_param('serial');
                my $xml = TransformHtmlToXml( \@tags, \@subfields, \@field_values );
                my $record = MARC::Record::new_from_xml( $xml, 'UTF-8' );
                for (my $qtyloop=1;$qtyloop <= $c_quantity;$qtyloop++) {
                    my ( $biblionumber, undef, $itemnumber ) = AddItemFromMarc( $record, $biblionumber );
                    $order->add_item( $itemnumber );
                }
            }
        }
>>>>>>>
        $imported++;
    }

    # If all bibliographic records from the batch have been imported we modifying the status of the batch accordingly
    SetImportBatchStatus( $import_batch_id, 'imported' )
        if Koha::Import::Records->search( { import_batch_id => $import_batch_id, status => 'imported' } )->count ==
        Koha::Import::Records->search( { import_batch_id => $import_batch_id } )->count;

    # go to basket page
    if ($imported) {
        print $input->redirect(
            "/cgi-bin/koha/acqui/basket.pl?basketno=" . $cgiparams->{'basketno'} . "&amp;duplinbatch=$duplinbatch" );
    } else {
        print $input->redirect( "/cgi-bin/koha/acqui/addorderiso2709.pl?import_batch_id=$import_batch_id&amp;basketno="
                . $cgiparams->{'basketno'}
                . "&amp;booksellerid=$booksellerid&amp;allmatch=1" );
    }
    exit;
}

my $budgets   = GetBudgets();
my $budget_id = @$budgets[0]->{'budget_id'};

# build bookfund list
my $patron = Koha::Patrons->find($loggedinuser)->unblessed;
my $budget = GetBudget($budget_id);

# build budget list
my $budget_loop       = [];
my $budgets_hierarchy = GetBudgetHierarchy;
foreach my $r ( @{$budgets_hierarchy} ) {
    next unless ( CanUserUseBudget( $patron, $r, $userflags ) );
    push @{$budget_loop},
        {
        b_id            => $r->{budget_id},
        b_txt           => $r->{budget_name},
        b_code          => $r->{budget_code},
        b_sort1_authcat => $r->{'sort1_authcat'},
        b_sort2_authcat => $r->{'sort2_authcat'},
        b_active        => $r->{budget_period_active},
        b_sel           => ( $r->{budget_id} == $budget_id ) ? 1 : 0,
        };
}

@{$budget_loop} =
    sort { uc( $a->{b_txt} ) cmp uc( $b->{b_txt} ) } @{$budget_loop};

$template->param( budget_loop => $budget_loop, );

output_html_with_http_headers $input, $cookie, $template->output;
